<?php
/**
 * @file
 * Utility functions for lÃ¦rdrupal.dk.
 */

/* --- HOOKS ---------------------------------------------------------------- */

/**
 * Implements hook_menu().
 */
function learn_utility_menu() {
  $items = array();

  $items['humans.txt'] = array(
    'title' => 'humans.txt',
    'page callback' => 'learn_utility_humanstxt',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_token_info().
 */
function learn_utility_token_info() {
  $info['tokens']['node']['learn-book-hierarchy'] = array(
    'name' => t('Book hierarchy'),
    'description' => t("The node's position in the book hierarchy."),
  );

  return $info;
}

/**
 * Implements hook_token().
 */
function learn_utility_tokens($type, $tokens, $data = array(), $options = array()) {
  $replacements = array();

  if ('node' == $type && !empty($data['node'])) {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'learn-book-hierarchy':
          $node = $data['node'];

          if (!empty($node->book['bid'])) {
            $menu_data = menu_tree_all_data($node->book['menu_name'], $node->book, $node->book['depth']);
            $path = _learn_utility_build_path($menu_data);
            $replacements[$original] = implode('/', $path);
          }

          break;
      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_wysiwyg_plugin().
 */
function learn_utility_wysiwyg_plugin($editor, $version) {
  // based on http://drupal.org/project/wysiwyg-geshi
  if ('ckeditor' == $editor) {
    module_load_include('inc', 'geshifilter');
    $languages = _geshifilter_get_available_languages();

    $buttons = _learn_utility_get_buttons($languages);
    $settings = _learn_utility_get_settings($languages);

    $css = _learn_utility_get_css(array_keys($buttons));

    drupal_add_css($css, 'inline');
    drupal_add_js(array('learnGeshi' => $settings), 'setting');

    return array(
      'geshi' => array(
        'path' => drupal_get_path('module', 'learn_utility') . '/js',
        'filename' => 'geshi.js',
        'buttons' => $buttons,
        'load' => TRUE,
      ),
    );
  }
}

/* --- CALLBACKS ------------------------------------------------------------ */

/**
 * Menu callback; display the humans.txt file if it exists.
 */
function learn_utility_humanstxt() {
  $path = drupal_get_path('theme', 'learn');
  $file = $path .'/humans.txt';

  if (file_exists($file) && $content = file_get_contents($file)) {
    drupal_add_http_header('Content-type', 'text/plain');
    print $content;
    exit;
  }
  else {
    return drupal_not_found();
  }
}

/* --- UTILITY -------------------------------------------------------------- */

/**
 * Returns wysiwyg buttons based on the enabled GeSHi filters.
 */
function _learn_utility_get_buttons($languages) {
  $buttons = array();

  foreach ($languages as $index => $language) {
    if (variable_get('geshifilter_language_enabled_' . $index, FALSE)) {
      $buttons['Geshi-' . $index] = 'Geshi: ' . $language['fullname'];
    }
  }

  return $buttons;
}

/**
 * Returns wysiwyg settings based on the enabled GeSHi filters.
 */
function _learn_utility_get_settings($languages) {
  $settings = array();

  foreach ($languages as $index => $language) {
    if (variable_get('geshifilter_language_enabled_' . $index, FALSE)) {
      $settings['Geshi-' . $index] = array(
        'label' => $index,
        'settings' => array(
          'element' => 'pre',
          'attributes' => array(
            'language' => $index,
          ),
        ),
      );
    }
  }

  return $settings;
}

/**
 * Returns wysiwyg css based on the enabled GeSHi filters.
 */
function _learn_utility_get_css($keys) {
  $css = '';

  $icons = $labels = array();
  foreach ($keys as $key) {
    $icons[] = '.cke_skin_kama .cke_button_' . $key . ' span.cke_icon';
    $labels[] = '.cke_skin_kama .cke_button_' . $key . ' span.cke_label';
  }

  $css .= implode(', ', $icons) . '{display: none !important;}';
  $css .= implode(', ', $labels) . '{display: inline;}';

  return $css;
}

/**
 * Create an array of menu link titles.
 */
function _learn_utility_build_path($menu, $path = array()) {
  $menu_item = $menu[key($menu)];

  $path[] = $menu_item['link']['link_title'];
  if (!empty($menu_item['below'])) {
    $path = _learn_utility_build_path($menu_item['below'], $path);
  }

  return $path;
}
